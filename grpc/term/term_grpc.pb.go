// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.5
// source: term.proto

package term

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TermClient is the client API for Term service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TermClient interface {
	// 定义方法
	Newterm(ctx context.Context, opts ...grpc.CallOption) (Term_NewtermClient, error)
}

type termClient struct {
	cc grpc.ClientConnInterface
}

func NewTermClient(cc grpc.ClientConnInterface) TermClient {
	return &termClient{cc}
}

func (c *termClient) Newterm(ctx context.Context, opts ...grpc.CallOption) (Term_NewtermClient, error) {
	stream, err := c.cc.NewStream(ctx, &Term_ServiceDesc.Streams[0], "/term.term/newterm", opts...)
	if err != nil {
		return nil, err
	}
	x := &termNewtermClient{stream}
	return x, nil
}

type Term_NewtermClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type termNewtermClient struct {
	grpc.ClientStream
}

func (x *termNewtermClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *termNewtermClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TermServer is the server API for Term service.
// All implementations must embed UnimplementedTermServer
// for forward compatibility
type TermServer interface {
	// 定义方法
	Newterm(Term_NewtermServer) error
	mustEmbedUnimplementedTermServer()
}

// UnimplementedTermServer must be embedded to have forward compatible implementations.
type UnimplementedTermServer struct {
}

func (UnimplementedTermServer) Newterm(Term_NewtermServer) error {
	return status.Errorf(codes.Unimplemented, "method Newterm not implemented")
}
func (UnimplementedTermServer) mustEmbedUnimplementedTermServer() {}

// UnsafeTermServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TermServer will
// result in compilation errors.
type UnsafeTermServer interface {
	mustEmbedUnimplementedTermServer()
}

func RegisterTermServer(s grpc.ServiceRegistrar, srv TermServer) {
	s.RegisterService(&Term_ServiceDesc, srv)
}

func _Term_Newterm_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TermServer).Newterm(&termNewtermServer{stream})
}

type Term_NewtermServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type termNewtermServer struct {
	grpc.ServerStream
}

func (x *termNewtermServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *termNewtermServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Term_ServiceDesc is the grpc.ServiceDesc for Term service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Term_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "term.term",
	HandlerType: (*TermServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "newterm",
			Handler:       _Term_Newterm_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "term.proto",
}
