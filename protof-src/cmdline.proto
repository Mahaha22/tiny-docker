syntax = "proto3";
import "google/protobuf/empty.proto";
package cmdline;
option go_package = "../grpc/cmdline;cmdline";
// option go_package = "生成位置;包名";

//容器信息
message container{
  string container_id = 1;
  string image = 2;
  string command = 3;
  string create_time = 4;
  repeated string volume_mount = 5;
  repeated string ports = 6;
  string name = 7;
  string status = 8;
}

//用于保存容器的配置设定
message flag{
  bool it = 1;
  string cpu = 2;
  string mem = 3;
  string name = 4;
  string image_id = 5;
  repeated string volmnt = 6; //挂载卷映射
}

//定义request model
message Request{
  flag args = 1;
  repeated string cmd = 2; //cmd传递具体的命令
}

//如果tiny-docker run xxx执行成功以后，服务器会返回给用户一个容器的id
message RunResponse{
  string containerId = 1;
}

//tiny-doocker ps执行成功以后，会返回给用户所有正在运行的容器的信息
message ContainerInfo{
  repeated container containers = 1;
}
message ContainerStdout{
  string outinfo = 1;
  string errinfo = 2;
}

//向服务器发送network信息
message Network{
  string subnet = 1;
  string driver = 2;
  string name = 3;
}
//所有的网络信息
message Networks{
  repeated Network nws = 1;
}
//定义服务主体
service Service{
  //启动一个容器
  rpc RunContainer(Request) returns(RunResponse);
  //查询容器状态
  rpc PsContainer(google.protobuf.Empty) returns(ContainerInfo);
  //给容器发送指令
  rpc ExecContainer(Request)returns(ContainerStdout);
  //杀死/清除容器
  rpc KillContainer(Request)returns(RunResponse);
  //新建一个网络
  rpc CreateNetwork(Network)returns(google.protobuf.Empty);
  //列出所有网络
  rpc ListNetwork(google.protobuf.Empty)returns(Networks);
  //删除网络
  rpc DelNetwork(Network)returns(google.protobuf.Empty);
}